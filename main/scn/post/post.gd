class_name PostContainer
extends PanelContainer

signal open_post(post)
signal show_user_profile(user_id, user)

onready var post_image : TextureRect = $PostContainer/Image

var id : String                     setget set_post_id      # generated by firestore
var user : String                   setget set_user         # user name
var user_id : String                setget set_user_id      # user id (localid)
var user_picture : ImageTexture     setget set_user_picture
var description : String            setget set_description  # description
var image : ImageTexture            setget set_image        # id + extension
var timestamp : int                 setget set_timestamp
var likes : Array = []              setget set_likes
var comments : Dictionary = {}      setget set_comments
var post : PostsManager.Post        setget set_post

var db_reference : FirebaseDatabaseReference

func _ready():
    $PostContainer/Header/Username.connect("pressed", self, "_on_Username_pressed")
    $PostContainer/ActionButtons/LikeBtn.connect("pressed", self, "_on_LikeBtn_pressed")
    $PostContainer/ActionButtons/CommentsBtn.connect("pressed", self, "_on_CommentsBtn_pressed")
    connect("open_post", Activities.home, "_on_open_post")
    
func set_post(p) -> void:
    post = p
    post.connect("update_image", self, "set_image")

func load_post(post) -> void:
    set_post(post)
    load_user_image(post.user_id)
    set_post_id(post.id)
    set_user(post.user)
    set_user_id(post.user_id)
    set_description(post.description)
    set_timestamp(post.timestamp)
    if post.image_name == "":
        set_image(null)
    PostsManager.add_post_scene(self)

func set_post_id(p : String):
    id = p
    name = id
    db_reference = Firebase.Database.get_database_reference("sociadot/posts/"+id)
    db_reference.connect("new_data_update", self, "_on_db_data")
    db_reference.connect("patch_data_update", self, "_on_db_data")

# Load user picture from a StorageTask
func load_user_image(user_id : String):
    if UsersManager.has_user(user_id):
        var user : UsersManager.User = UsersManager.get_user_by_id(user_id)
        set_user_picture(user.picture)
        user.connect("update_picture", self, "set_user_picture")
    else:
        Utilities.get_user(user_id)
        var new_user : UsersManager.User = UsersManager.add_user(user_id, Utilities.get_user(user_id), Utilities.get_profile_picture(user_id))
        new_user.connect("update_picture", self, "set_user_picture")

# Load post image from Storage
func load_image(img : String):
    var img_tex : ImageTexture
    var image_task : StorageTask = Utilities.get_post_image(user_id, id, img)
    yield(image_task, "task_finished")
    if typeof(image_task.data) != TYPE_RAW_ARRAY:
        return
    img_tex = Utilities.byte2image(image_task.data)
    set_image(img_tex)

func set_likes(l : Array):
    likes = l
    $PostContainer/ActionButtons/LikeBtn.set_text(likes.size() as String)
    $PostContainer/ActionButtons/LikeBtn.activated = likes.has(UserData.user_id)

func set_comments(c : Dictionary):
    comments = c
    $PostContainer/ActionButtons/CommentsBtn.set_text(comments.keys().size() as String)


func set_user_picture(picture : ImageTexture):
    user_picture = picture
    if picture == null:
        return
    $PostContainer/Header/Avatar.set_normal_texture(picture)
    $PostContainer/Header.show()

func set_user(u : String):
    user = u
    $PostContainer/Header/Username.set_text(user)

func set_user_id(id : String):
    user_id = id

func set_description(d : String):
    description = d
    $PostContainer/Text.set_bbcode(d)
    $PostContainer/Text.show()


func set_image(img : ImageTexture):
    if not post_image:
        return
    image = img
    if img == null:
        post_image.material = null
        post_image.hide()
        return
    else:
        post_image.show()
    post_image.set_texture(img)
    if img.get_size().y < 100:
        post_image.stretch_mode = TextureRect.STRETCH_KEEP_ASPECT_CENTERED
    else :
        post_image.rect_min_size.y = 300
        post_image.stretch_mode = TextureRect.STRETCH_KEEP_ASPECT_COVERED
    post_image.material = null

func set_timestamp(t : int):
    timestamp = t
    $PostContainer/Header/Timestamp.set_text(Utilities.get_human_time(t))

func _on_LikeBtn_pressed():
    if likes.has(UserData.user_id):
        likes.erase(UserData.user_id)
    else:
        likes.append(UserData.user_id)
        var love_particle : CPUParticles2D = Activities.love_particle_scene.instance()
        love_particle.add_to_control($PostContainer/ActionButtons/LikeBtn)
    Utilities.update_post_likes(likes, db_reference)


func _on_db_data(resource : FirebaseResource):
    if resource.key == "likes":
        set_likes(resource.data)
    elif resource.key == "comments":
        set_comments(resource.data)
    elif resource.key in [""," "]:
        if resource.data.has("comments"):
            set_comments(resource.data.comments if resource.data.comments != null else [])
        elif resource.data.has("likes"):
            set_likes(resource.data.likes if resource.data.likes != null else [])

func _on_Username_pressed():
    emit_signal("show_user_profile", user_id, user)

func _on_CommentsBtn_pressed():
    pass


func _on_Image_gui_input(event):
    if event is InputEventMouseButton:
        if event.is_pressed() and event.button_index == BUTTON_LEFT:
            emit_signal("open_post", post)
